name: getbadge

on:
  push:
    branches:
      - '*'

  #schedule:
  #  # run CI at the end of every day https://jasonet.co/posts/scheduled-actions/
  #  - cron: "0 12 * * 1"

jobs:
  get-download-count:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install deps
        run: |
          npm i node-fetch
          npm install jsdom fs
          

      - uses: actions/github-script@v6
        with:
          script: |
            //const { fetch } = await import('node-fetch');  // dynamic import don't work as it should with node-fetch?

            //const { fetchText } = await import('${{ github.workspace }}/source/html/generate-badge.js')
            //await fetchText()

            //const { fetch } = await import('node-fetch');  // dynamic import don't work as it should with node-fetch?

            const { default: fetch } = await import('node-fetch')
            //const { fetch } = require('node-fetch');
            const { JSDOM } = require("jsdom");
            const { default: document } = (new JSDOM(`...`)).window;
            var fs = require('fs')

            let url = "https://dataverse.no/api/info/metrics/filedownloads?parentAlias=ntnu";
            let response = await fetch(url);
            if (response.status === 200) {
                let content = await response.text();
                let pid = "10.18710/TLA01U";
                let output = getBadge(content, pid);
                
                // write result to disk
                fs.appendFile('./test.txt', output, function (err) {
                    if (err) return console.log(err);
                    console.log('Appended!');
                });
            }
            
            function getBadge(content, pidToFind) {
              var x = content.split("\n");
              for (var i = 0; i < x.length; i++) {
                  y = x[i].split(",");
                  x[i] = y;
              }
              let total = 0;
              x.shift(); // remove header row ("id,pid,count")
              for (const row of x) {
                  let pid = row[1];
                  let count = row[2];
                  if (pid.includes(pidToFind)) {
                  total += Number(count);
                  }
              }
              return (
                  '<a href="https://doi.org/' +
                  pidToFind +
                  '"><img src="https://img.shields.io/badge/DataverseNO%20downloads-' +
                  total +
                  '-orange"></a>'
                );
            }
            
